name: Deploy Safe Communication Rewriter

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
      
      - name: Install Backend Dependencies
        run: |
          cd backend
          npm ci
      
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run Backend Tests
        run: |
          cd backend
          npm run test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password@localhost:27017/test?authSource=admin
          REDIS_URL: redis://localhost:6379
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          JWT_SECRET: test-secret
      
      - name: Run Frontend Tests
        run: |
          cd frontend
          npm run test
        env:
          NODE_ENV: test
      
      - name: Build Backend
        run: |
          cd backend
          npm run build
        env:
          NODE_ENV: production
      
      - name: Build Frontend
        run: |
          cd frontend
          npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: http://localhost:3001

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Security Audit
        run: |
          cd backend
          npm audit --audit-level=moderate
          
          cd ../frontend
          npm audit --audit-level=moderate
      
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/
      
      - name: Run Smoke Tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/
      
      - name: Notify Deployment
        run: |
          echo "Production deployment completed successfully!"
          # Add notification commands here (Slack, email, etc.)

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Rollback Deployment
        run: |
          echo "Rolling back deployment..."
          # Add rollback commands here
